// Code generated by "enumer -type=SpecialToken -trimprefix=Tok -transform=snake -values -text -json -yaml api.go"; DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SpecialTokenName = "beginning_of_sentenceend_of_sentenceunknownpadmaskclassificationspecial_tokens_count"

var _SpecialTokenIndex = [...]uint8{0, 21, 36, 43, 46, 50, 64, 84}

const _SpecialTokenLowerName = "beginning_of_sentenceend_of_sentenceunknownpadmaskclassificationspecial_tokens_count"

func (i SpecialToken) String() string {
	if i < 0 || i >= SpecialToken(len(_SpecialTokenIndex)-1) {
		return fmt.Sprintf("SpecialToken(%d)", i)
	}
	return _SpecialTokenName[_SpecialTokenIndex[i]:_SpecialTokenIndex[i+1]]
}

func (SpecialToken) Values() []string {
	return SpecialTokenStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SpecialTokenNoOp() {
	var x [1]struct{}
	_ = x[TokBeginningOfSentence-(0)]
	_ = x[TokEndOfSentence-(1)]
	_ = x[TokUnknown-(2)]
	_ = x[TokPad-(3)]
	_ = x[TokMask-(4)]
	_ = x[TokClassification-(5)]
	_ = x[TokSpecialTokensCount-(6)]
}

var _SpecialTokenValues = []SpecialToken{TokBeginningOfSentence, TokEndOfSentence, TokUnknown, TokPad, TokMask, TokClassification, TokSpecialTokensCount}

var _SpecialTokenNameToValueMap = map[string]SpecialToken{
	_SpecialTokenName[0:21]:       TokBeginningOfSentence,
	_SpecialTokenLowerName[0:21]:  TokBeginningOfSentence,
	_SpecialTokenName[21:36]:      TokEndOfSentence,
	_SpecialTokenLowerName[21:36]: TokEndOfSentence,
	_SpecialTokenName[36:43]:      TokUnknown,
	_SpecialTokenLowerName[36:43]: TokUnknown,
	_SpecialTokenName[43:46]:      TokPad,
	_SpecialTokenLowerName[43:46]: TokPad,
	_SpecialTokenName[46:50]:      TokMask,
	_SpecialTokenLowerName[46:50]: TokMask,
	_SpecialTokenName[50:64]:      TokClassification,
	_SpecialTokenLowerName[50:64]: TokClassification,
	_SpecialTokenName[64:84]:      TokSpecialTokensCount,
	_SpecialTokenLowerName[64:84]: TokSpecialTokensCount,
}

var _SpecialTokenNames = []string{
	_SpecialTokenName[0:21],
	_SpecialTokenName[21:36],
	_SpecialTokenName[36:43],
	_SpecialTokenName[43:46],
	_SpecialTokenName[46:50],
	_SpecialTokenName[50:64],
	_SpecialTokenName[64:84],
}

// SpecialTokenString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SpecialTokenString(s string) (SpecialToken, error) {
	if val, ok := _SpecialTokenNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SpecialTokenNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SpecialToken values", s)
}

// SpecialTokenValues returns all values of the enum
func SpecialTokenValues() []SpecialToken {
	return _SpecialTokenValues
}

// SpecialTokenStrings returns a slice of all String values of the enum
func SpecialTokenStrings() []string {
	strs := make([]string, len(_SpecialTokenNames))
	copy(strs, _SpecialTokenNames)
	return strs
}

// IsASpecialToken returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SpecialToken) IsASpecialToken() bool {
	for _, v := range _SpecialTokenValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SpecialToken
func (i SpecialToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SpecialToken
func (i *SpecialToken) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SpecialToken should be a string, got %s", data)
	}

	var err error
	*i, err = SpecialTokenString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for SpecialToken
func (i SpecialToken) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SpecialToken
func (i *SpecialToken) UnmarshalText(text []byte) error {
	var err error
	*i, err = SpecialTokenString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for SpecialToken
func (i SpecialToken) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for SpecialToken
func (i *SpecialToken) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = SpecialTokenString(s)
	return err
}
